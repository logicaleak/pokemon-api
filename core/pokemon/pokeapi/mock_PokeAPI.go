// Code generated by mockery v2.3.0. DO NOT EDIT.

package pokeapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPokeAPI is an autogenerated mock type for the PokeAPI type
type MockPokeAPI struct {
	mock.Mock
}

// GetPokemonSpecies provides a mock function with given fields: _a0, _a1
func (_m *MockPokeAPI) GetPokemonSpecies(_a0 context.Context, _a1 string) (*PokemonSpecies, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *PokemonSpecies
	if rf, ok := ret.Get(0).(func(context.Context, string) *PokemonSpecies); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PokemonSpecies)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPokemons provides a mock function with given fields: ctx, offset
func (_m *MockPokeAPI) GetPokemons(ctx context.Context, offset int) (*Pokemons, error) {
	ret := _m.Called(ctx, offset)

	var r0 *Pokemons
	if rf, ok := ret.Get(0).(func(context.Context, int) *Pokemons); ok {
		r0 = rf(ctx, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pokemons)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
