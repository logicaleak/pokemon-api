// Code generated by mockery v2.3.0. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pokeapi "ozum.safaoglu/pokemon-api/core/pokemon/pokeapi"
)

// MockShakespeareanPokemon is an autogenerated mock type for the ShakespeareanPokemon type
type MockShakespeareanPokemon struct {
	mock.Mock
}

// GetDescription provides a mock function with given fields: _a0, _a1
func (_m *MockShakespeareanPokemon) GetDescription(_a0 context.Context, _a1 string) (*PokemonDescription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *PokemonDescription
	if rf, ok := ret.Get(0).(func(context.Context, string) *PokemonDescription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PokemonDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPokemons provides a mock function with given fields: _a0, _a1
func (_m *MockShakespeareanPokemon) GetPokemons(_a0 context.Context, _a1 int) (*pokeapi.Pokemons, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pokeapi.Pokemons
	if rf, ok := ret.Get(0).(func(context.Context, int) *pokeapi.Pokemons); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pokeapi.Pokemons)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
